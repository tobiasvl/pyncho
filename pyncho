#!/usr/bin/env python

import sys, os, shutil, re

task_path = os.path.join(".pyncho", "tasks")
if os.path.isdir(task_path):
    tasks = os.listdir(task_path)
else:
    tasks = None

try:
    editor = os.environ['EDITOR']
except KeyError:
    editor = "vim"

def usage():
    print "pyncho - blogging for intellectuals who hate ponchos and love Gravity's Rainbow"
    print "USAGE: pyncho prepare|info|list|post|rewrite|generate|version"
    if tasks:
        print "TASKS: pyncho " + "|".join(tasks)

try:
    command = sys.argv[1]
except:
    usage()
    sys.exit(2)

if command == "prepare":
    try:
        shutil.copytree(Pyncho.skeleton, ".pyncho")
        print "oh yea! vim .pyncho/rc"
        sys.exit(0)
    except:
        print "pyncho. pyncho? pyncho!"
        sys.exit(1)

if command == "version":
    "v%s: %s" % Pyncho.version, Pyncho.tag
    sys.exit(0)

if tasks and command in tasks:
    os.system(".pyncho/tasks/" + command)
    sys.exit(0)

try:
    blog = Poncho.Blog()
    blog.do_file(".poncho/rc")

    # Oh how I pine for a switch statement
    if command == "info":
        blog.execute_hook("before-info")
        print blog.title; print

        count = blog.posts.size
        print "post count: %i" % count
        
        if count > 0:
            latest = blog.posts_by_date.first.nice_date
            print "last post: %s" % latest

        blog.execute_hook("after-info")
    elif command == "generate":
        blog.execute_hook("before-generate")

        if not blog.posts:
            print "No posts found"
            sys.exit(0)

        try:
            os.mkdir(blog.output_path)
        except OSError: # Directory existed
            pass

        print "Generating root node..."
        root_node = open(blog.output_path + "/index.html", 'w')
        root_node.write(blog.generate_latest)

        print "Generating post nodes..."
        for node in blog.posts:
            print ".",
            node_filename = blog.output_path + "/" + node.id + ".html"
            if os.isfile(node_filename) or node.last_update > os.getmtime(node_filename):
                node_file = open(node_filename, 'w')
                node_file.write(blog.generate_node(node))
                node_file.close()
        print

        print "Generating archive..."
        archive_file = open(blog.output_path + "/archive.html", 'w')
        if blog.archive_style == "seasonal":
            archive_file.write(blog.generate_seasonal_archive)
            for season, posts in blog.archive.posts_by_season:
                season_file = open(blog.output_path + "/" + season.as_poncho_id + ".html", 'w')
                season_file.write(blog.generate_season(season, posts))
                season_file.close()
        #elif blog.archive_style == "daily":
        #elif blog.archive_style == "yearly":
        else: # "flat"
            archive_file.write(blog.generate_archive)
        archive_file.close()

        print "Generating feed..."
        feed_file = open(blog.output_path + "/feed.rss", 'w')
        feed_file.write(blog.generate_feed)
        feed_file.close()
        blog.execute_hook("after-generate")

    elif command == "post":
        blog.execute_hook("before-post")
        date = datetime.now().strftime("%Y-%m-%d")
        if sys.argv.len() > 2:
            title = " ".join(sys.argv[2:])
        else:
            title = "Untitled"
        id = Poncho.poncho_id(title)
        path = os.path.join(blog.nodepath, date + "." + id + ".txt")
        os.system(editor + " " + path)
        blog.execute_hook("after-post")
    elif command == "list":
        pattern = " ".join(sys.argv[2:])
        for post in blog.posts:
            if pattern == "" or re.search(pattern, post.title):
                print "%s, %s" % post.nice_date, post.title
    elif command == "rewrite":
        pass
        #TODO
    else: # No/invalid command
        usage
except Exception, e:
    print e
    print "have you done 'pyncho prepare' yet????"
    sys.exit(1)
